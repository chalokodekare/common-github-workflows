name: Build Image Workflow

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      image-tag:
        description: "Docker image tag"
        value: ${{ jobs.build_push_image.outputs.image-tag }}

env:
  PROJECT_NAME: "chalocodekare"
  ENV_NAME: "live"
  GEOGRAPHY_NAME: "us"
  ASP_NAME: "chalocodekare-asp"
  ACR_NAME: "chalocodekare-cr"
  APP: "cgw-service"
  VERSION: "2022.1.0-SNAPSHOT"
  IMAGE_NAME: "cgw-service"
  IMAGE_TAG: ${{ github.run_id }}

jobs:
  build_push_image:
    runs-on: ubuntu-latest

    steps:
      - name: 'SETUP - Checkout Branch Code'
        uses: actions/checkout@v2

      - name: 'Provides environment variables from .env file.'
        id: dotenv
        uses: falti/dotenv-action@v0.2.6
        with:
          path: .github/workflows/.env
          log-variables: true

      - name: 'Set up Java ${{ steps.dotenv.outputs.JAVA_VERSION }}'
        uses: actions/setup-java@v2
        with:
          java-version: "${{ steps.dotenv.outputs.JAVA_VERSION }}"
          distribution: '${{ steps.dotenv.outputs.JAVA_DISTRIBUTION }}'

      - name: 'GRANT PERMISSION - Grant execute permission for gradlew'
        run: chmod +x gradlew

      - name: 'SETUP - gradle.properties'
        run: |
          echo "artifactoryContextUrl=${{ secrets.ARTIFACTORY_CONTEXT_URL }}" >> gradle.properties
          echo "artifactoryUsername=${{ secrets.ARTIFACTORY_USER }}" >> gradle.properties
          echo "artifactoryPassword=${{ secrets.ARTIFACTORY_TOKEN }}" >> gradle.properties

      - name: 'BUILD - Libraries'
        run: |
          ./gradlew build

      - name: 'Initialize env vars for live environment'
        run: |
          echo "AUTH_ENDPOINT=https://login.live/realms/Env/protocol/openid-connect/token" >> ${GITHUB_ENV}
          echo "API_ENDPOINT=https://api.live" >> ${GITHUB_ENV}

      - name: 'Initialize secrets from github environment'
        run: |
          echo "SPN_CLIENT_ID=${{ secrets.COMMON_ENV_SPN_CLIENT_ID }}" >> ${GITHUB_ENV}
          echo "SPN_CLIENT_SECRET=${{ secrets.COMMON_ENV_SPN_CLIENT_SECRET }}" >> ${GITHUB_ENV}

      - name: 'Checkout BY-Product-Development/ds-github-actions'
        uses: actions/checkout@v2
        with:
          repository: BY-Product-Development/ds-github-actions
          ref: master
          ssh-key: ${{ secrets.DS_GITHUB_GH_ACTIONS_CHECKOUT_SSH_KEY }}
          persist-credentials: false
          path: ./actions

      - name: 'Get Env Access Token'
        id: env_login
        uses: ./actions/env/login
        with:
          client-id: ${SPN_CLIENT_ID}
          client-secret: ${SPN_CLIENT_SECRET}
          auth-endpoint: ${AUTH_ENDPOINT}

      - name: 'Initialize Env Access Token'
        run: |
          echo "ENV_ACCESS_TOKEN=${{ steps.env_login.outputs.env-access-token }}" >> ${GITHUB_ENV}

      - name: 'Env ACR information'
        id: env_acr
        uses: ./actions/env/container_registry
        with:
          resource-name: ${ACR_NAME}
          project-name: ${PROJECT_NAME}
          geography-name: ${GEOGRAPHY_NAME}
          stage: ${ENV_NAME}

      - name: 'Initialize ACR endpoint'
        run: |
          echo "ACR_ENDPOINT=${{ steps.env_acr.outputs.endpoint-url }}" >> ${GITHUB_ENV}

      - name: 'Initialize docker image'
        run: |
          echo "DOCKER_IMAGE=${{ env.ACR_ENDPOINT }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> ${GITHUB_ENV}

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v1

      - name: 'Get Env Azure Service Principal Information'
        id: env_asp
        uses: ./actions/env/service_principal
        with:
          project-name: ${PROJECT_NAME}
          geography-name: ${GEOGRAPHY_NAME}
          resource-name: ${ASP_NAME}
          stage: ${ENV_NAME}

      - name: 'Login to ACR'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ACR_ENDPOINT }}
          username: ${{ steps.env_asp.outputs.client-id }}
          password: ${{ steps.env_asp.outputs.client-secret }}

      - name: 'Build & Push image to ACR'
        id: build_push_image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: "${{ env.DOCKER_IMAGE }}"
          build-args: |
            app=${{ env.APP }}
            version=${{ env.VERSION }}

    outputs:
      image-tag: ${{ env.IMAGE_TAG }}